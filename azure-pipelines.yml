trigger:
- master

jobs:

- job: Pipeline
  strategy:
    matrix:
      linux:
        python.version: '3.7'
        imageName: 'ubuntu-16.04'
      windows:
        python.version: '3.7'
        imageName: 'vs2017-win2016'
    maxParallel: 4

  pool:
    vmImage: $(imageName)

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1
    inputs:
      keyfile: 'poetry.lock'
      targetfolder: '.venv, .poetry'
      vstsFeed: '$(CacheArtifactFeedId)'
    displayName: 'PyPI Cache Restore'

  - script: |
      python -m venv .poetry
      ./.poetry/bin/python -m pip install --upgrade pip
      ./.poetry/bin/python -m pip install --upgrade poetry
      ./.poetry/bin/python -m poetry config settings.virtualenvs.in-project true
      ./.poetry/bin/python -m poetry config settings.virtualenvs.path .venv
    displayName: 'Poetry setup'

  - script: |
      strace -yttfo strace.poetry.log .poetry/bin/python -m poetry install
    displayName: 'Install/update dependencies'
    condition: eq( variables['Agent.OS'], 'Linux' )

  - script: |
      .poetry/bin/python -m poetry install
    displayName: 'Install/update dependencies'
    condition: eq( variables['Agent.OS'], 'Windows_NT' )

    # If dependency resolution succeeded, cache.
  - task: 1ESLighthouseEng.PipelineArtifactCaching.SaveCacheV1.SaveCache@1
    inputs:
      keyfile: 'poetry.lock'
      targetfolder: '.venv, .poetry'
      vstsFeed: '$(CacheArtifactFeedId)'
    displayName: 'PyPI Cache Save'

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'debug_$(python.version)_$(Agent.OS)'
      targetPath: strace.poetry.log
    condition: succeededOrFailed()
    displayName: Debug

  - script: |
      .poetry/bin/python -m poetry run pytest -s -ra --junitxml=junit/test-results.xml tests
    displayName: Run tests
