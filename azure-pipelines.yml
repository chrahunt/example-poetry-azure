trigger:
- master

jobs:

- job: Pipeline
  strategy:
    matrix:
      linux:
        python.version: '3.7'
        imageName: 'ubuntu-16.04'
      windows:
        python.version: '3.7'
        imageName: 'vs2017-win2016'
    maxParallel: 4

  pool:
    vmImage: $(imageName)

  steps:
  - task: UsePythonVersion@0
    inputs:
      versionSpec: '$(python.version)'
      architecture: 'x64'

  - displayName: 'PyPI Cache Restore'
    task: 1ESLighthouseEng.PipelineArtifactCaching.RestoreCacheV1.RestoreCache@1
    inputs:
      # TODO: Python version for each artifact?
      keyfile: 'poetry.lock'
      targetfolder: '.venv, .poetry'
      vstsFeed: '$(CacheArtifactFeedId)'

  - displayName: Make Poetry venv
    # venv is idempotent - no issues if cache has been restored
    script: python -m venv .poetry

  - displayName: Setup Poetry 1
    task: PythonScript@0
    inputs:
      scriptPath: .ci/scripts/python.py
      arguments: -m pip install --upgrade pip
    env:
      VENV: .poetry

  - displayName: Setup Poetry 2
    task: PythonScript@0
    inputs:
      scriptPath: .ci/scripts/python.py
      arguments: -m pip install --upgrade poetry
    env:
      VENV: .poetry

  - displayName: Configure Poetry 1
    task: PythonScript@0
    inputs:
      scriptPath: .ci/scripts/python.py
      arguments: -m poetry config settings.virtualenvs.in-project true
    env:
      VENV: .poetry

  - displayName: Configure Poetry 2
    task: PythonScript@0
    inputs:
      scriptPath: .ci/scripts/python.py
      arguments: -m poetry config settings.virtualenvs.path .venv
    env:
      VENV: .poetry

  - displayName: Make app venv
    # Letting Python install the virtual environment works around an issue
    # seen where ensurepip fails when poetry executes the installation.
    script: python -m venv .venv

  - displayName: Install/update dependencies
    task: PythonScript@0
    inputs:
      scriptPath: .ci/scripts/python.py
      arguments: -m poetry install
    env:
      VENV: .poetry

    # If dependency resolution succeeded, cache.
  - task: 1ESLighthouseEng.PipelineArtifactCaching.SaveCacheV1.SaveCache@1
    inputs:
      keyfile: 'poetry.lock'
      targetfolder: '.venv, .poetry'
      vstsFeed: '$(CacheArtifactFeedId)'
    displayName: 'PyPI Cache Save'

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'debug_$(python.version)_$(Agent.OS)'
      targetPath: strace.poetry.log
    condition: succeededOrFailed()
    displayName: Debug

  - bash: |
      .poetry/bin/python -m poetry run pytest -s -ra --junitxml=junit/test-results.xml tests
    displayName: Run tests
